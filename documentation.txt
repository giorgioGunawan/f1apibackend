F1 RACE API DOCUMENTATION
=========================

Overview
--------
This API provides access to Formula 1 race data, including race schedules, results, driver and constructor standings, and live race information. It allows you to retrieve, create, update, and delete various F1-related data.

Base URL
--------
https://f1-race-api.onrender.com/api

Authentication
-------------
Currently, the API does not require authentication. All endpoints are publicly accessible.

Response Format
--------------
All responses are in JSON format. Successful responses typically include the requested data or a success message. Error responses include an error message.

Endpoints
---------

RACES
-----

Get All Races
GET /races

Returns a list of all races in the database.

Response Example:
[
  {
    "id": 1,
    "round": 1,
    "name": "Bahrain Grand Prix",
    "location": "Bahrain International Circuit",
    "datetime_fp1": 1678442400,
    "datetime_fp2": 1678456800,
    "datetime_fp3": 1678528800,
    "datetime_sprint": null,
    "datetime_qualifying": 1678543200,
    "datetime_race": 1678629600,
    "first_place": "Max Verstappen",
    "second_place": "Sergio Perez",
    "third_place": "Fernando Alonso"
  },
  // More races...
]


Get Next Race
GET /nextrace

Returns the next upcoming race based on the current date.

Response Example:
{
  "id": 5,
  "round": 5,
  "name": "Miami Grand Prix",
  "location": "Miami International Autodrome",
  "datetime_fp1": 1683907200,
  "datetime_fp2": 1683921600,
  "datetime_fp3": 1683993600,
  "datetime_sprint": null,
  "datetime_qualifying": 1684008000,
  "datetime_race": 1684094400,
  "first_place": null,
  "second_place": null,
  "third_place": null
}


Get Race by ID
GET /races/:id

Returns a specific race by its ID.

Parameters:
- id (path parameter): The ID of the race to retrieve

Response Example:
{
  "id": 1,
  "round": 1,
  "name": "Bahrain Grand Prix",
  "location": "Bahrain International Circuit",
  "datetime_fp1": 1678442400,
  "datetime_fp2": 1678456800,
  "datetime_fp3": 1678528800,
  "datetime_sprint": null,
  "datetime_qualifying": 1678543200,
  "datetime_race": 1678629600,
  "first_place": "Max Verstappen",
  "second_place": "Sergio Perez",
  "third_place": "Fernando Alonso"
}


Add a New Race
POST /races

Creates a new race.

Request Body:
{
  "round": 6,
  "name": "Monaco Grand Prix",
  "location": "Circuit de Monaco",
  "datetime_fp1": 1685097600,
  "datetime_fp2": 1685112000,
  "datetime_fp3": 1685184000,
  "datetime_sprint": null,
  "datetime_qualifying": 1685198400,
  "datetime_race": 1685284800,
  "first_place": null,
  "second_place": null,
  "third_place": null
}

Required Fields:
- name: Race name
- location: Race location
- datetime_race: Unix timestamp for race start time

Optional Fields:
- round: Race round number
- datetime_fp1: Unix timestamp for Practice 1
- datetime_fp2: Unix timestamp for Practice 2
- datetime_fp3: Unix timestamp for Practice 3
- datetime_sprint: Unix timestamp for Sprint race
- datetime_qualifying: Unix timestamp for Qualifying
- first_place: Name of the driver who finished first
- second_place: Name of the driver who finished second
- third_place: Name of the driver who finished third

Response Example:
{
  "id": 6,
  "round": 6,
  "name": "Monaco Grand Prix",
  "location": "Circuit de Monaco",
  "datetime_fp1": 1685097600,
  "datetime_fp2": 1685112000,
  "datetime_fp3": 1685184000,
  "datetime_sprint": null,
  "datetime_qualifying": 1685198400,
  "datetime_race": 1685284800,
  "first_place": null,
  "second_place": null,
  "third_place": null
}


Update a Race
PUT /races/:id

Updates an existing race.

Parameters:
- id (path parameter): The ID of the race to update

Request Body:
Same as for creating a new race.

Response Example:
{
  "id": 6,
  "round": 6,
  "name": "Monaco Grand Prix",
  "location": "Circuit de Monaco",
  "datetime_fp1": 1685097600,
  "datetime_fp2": 1685112000,
  "datetime_fp3": 1685184000,
  "datetime_sprint": null,
  "datetime_qualifying": 1685198400,
  "datetime_race": 1685284800,
  "first_place": "Charles Leclerc",
  "second_place": "Carlos Sainz",
  "third_place": "Lando Norris"
}


Update Race Podium
PUT /races/:id/podium

Updates only the podium results for a race.

Parameters:
- id (path parameter): The ID of the race to update

Request Body:
{
  "first_place": "Charles Leclerc",
  "second_place": "Carlos Sainz",
  "third_place": "Lando Norris"
}

Required Fields:
- first_place: Name of the driver who finished first
- second_place: Name of the driver who finished second
- third_place: Name of the driver who finished third

Response Example:
{
  "id": 6,
  "first_place": "Charles Leclerc",
  "second_place": "Carlos Sainz",
  "third_place": "Lando Norris"
}


Delete a Race
DELETE /races/:id

Deletes a race.

Parameters:
- id (path parameter): The ID of the race to delete

Response Example:
{
  "message": "Race deleted successfully"
}


RESULTS
-------

Get All Results
GET /results

Returns all results across all races and sessions.

Response Example:
[
  {
    "id": 1,
    "race_id": 1,
    "session_type": "race",
    "position": 1,
    "driver_name": "Max Verstappen",
    "team_name": "Red Bull Racing",
    "time": "1:33:56.736",
    "laps": 57,
    "points": 25
  },
  // More results...
]


Get Results by Race ID
GET /results/race/:race_id

Returns all results for a specific race across all sessions.

Parameters:
- race_id (path parameter): The ID of the race

Response Example:
[
  {
    "id": 1,
    "race_id": 1,
    "session_type": "race",
    "position": 1,
    "driver_name": "Max Verstappen",
    "team_name": "Red Bull Racing",
    "time": "1:33:56.736",
    "laps": 57,
    "points": 25
  },
  // More results for this race...
]


Get Results by Race ID and Session Type
GET /results/race/:race_id/session/:session_type

Returns results for a specific race and session type.

Parameters:
- race_id (path parameter): The ID of the race
- session_type (path parameter): The session type (fp1, fp2, fp3, sprint, qualifying, race)

Response Example:
[
  {
    "id": 1,
    "race_id": 1,
    "session_type": "race",
    "position": 1,
    "driver_name": "Max Verstappen",
    "team_name": "Red Bull Racing",
    "time": "1:33:56.736",
    "laps": 57,
    "points": 25
  },
  // More results for this race and session...
]


Get Result by ID
GET /results/:id

Returns a specific result by its ID.

Parameters:
- id (path parameter): The ID of the result to retrieve

Response Example:
{
  "id": 1,
  "race_id": 1,
  "session_type": "race",
  "position": 1,
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "time": "1:33:56.736",
  "laps": 57,
  "points": 25
}


Add a New Result
POST /results

Creates a new result.

Request Body:
{
  "race_id": 1,
  "session_type": "race",
  "position": 1,
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "time": "1:33:56.736",
  "laps": 57,
  "points": 25
}

Required Fields:
- race_id: ID of the race
- session_type: Type of session (fp1, fp2, fp3, sprint, qualifying, race)
- position: Finishing position
- driver_name: Name of the driver
- team_name: Name of the team

Optional Fields:
- time: Finishing time or gap
- laps: Number of laps completed
- points: Points awarded

Response Example:
{
  "id": 1,
  "race_id": 1,
  "session_type": "race",
  "position": 1,
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "time": "1:33:56.736",
  "laps": 57,
  "points": 25
}


Update a Result
PUT /results/:id

Updates an existing result.

Parameters:
- id (path parameter): The ID of the result to update

Request Body:
Same as for creating a new result.

Response Example:
{
  "id": 1,
  "race_id": 1,
  "session_type": "race",
  "position": 1,
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "time": "1:33:56.736",
  "laps": 57,
  "points": 25
}


Delete a Result
DELETE /results/:id

Deletes a result.

Parameters:
- id (path parameter): The ID of the result to delete

Response Example:
{
  "message": "Result deleted successfully"
}


DRIVER STANDINGS
---------------

Get All Driver Standings
GET /driver-standings

Returns all driver standings.

Response Example:
[
  {
    "id": 1,
    "driver_name": "Max Verstappen",
    "team_name": "Red Bull Racing",
    "points": 119,
    "driver_number": 1
  },
  // More driver standings...
]


Get Driver Standing by ID
GET /driver-standings/:id

Returns a specific driver standing by its ID.

Parameters:
- id (path parameter): The ID of the driver standing to retrieve

Response Example:
{
  "id": 1,
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "points": 119,
  "driver_number": 1
}


Add a New Driver Standing
POST /driver-standings

Creates a new driver standing.

Request Body:
{
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "points": 119,
  "driver_number": 1
}

Required Fields:
- driver_name: Name of the driver
- team_name: Name of the team
- points: Current points

Optional Fields:
- driver_number: Driver's car number

Response Example:
{
  "id": 1,
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "points": 119,
  "driver_number": 1
}


Update a Driver Standing
PUT /driver-standings/:id

Updates an existing driver standing.

Parameters:
- id (path parameter): The ID of the driver standing to update

Request Body:
Same as for creating a new driver standing.

Response Example:
{
  "id": 1,
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "points": 125,
  "driver_number": 1
}


Delete a Driver Standing
DELETE /driver-standings/:id

Deletes a driver standing.

Parameters:
- id (path parameter): The ID of the driver standing to delete

Response Example:
{
  "message": "Driver standing deleted successfully"
}


CONSTRUCTOR STANDINGS
--------------------

Get All Constructor Standings
GET /constructor-standings

Returns all constructor standings.

Response Example:
[
  {
    "id": 1,
    "constructor_name": "Red Bull Racing",
    "points": 195,
    "driver_name_1": "Max Verstappen",
    "driver_name_2": "Sergio Perez",
    "driver_name_3": null
  },
  // More constructor standings...
]


Get Constructor Standing by ID
GET /constructor-standings/:id

Returns a specific constructor standing by its ID.

Parameters:
- id (path parameter): The ID of the constructor standing to retrieve

Response Example:
{
  "id": 1,
  "constructor_name": "Red Bull Racing",
  "points": 195,
  "driver_name_1": "Max Verstappen",
  "driver_name_2": "Sergio Perez",
  "driver_name_3": null
}


Add a New Constructor Standing
POST /constructor-standings

Creates a new constructor standing.

Request Body:
{
  "constructor_name": "Red Bull Racing",
  "points": 195,
  "driver_name_1": "Max Verstappen",
  "driver_name_2": "Sergio Perez",
  "driver_name_3": null
}

Required Fields:
- constructor_name: Name of the constructor/team
- points: Current points

Optional Fields:
- driver_name_1: Name of the first driver
- driver_name_2: Name of the second driver
- driver_name_3: Name of the third driver (if applicable)

Response Example:
{
  "id": 1,
  "constructor_name": "Red Bull Racing",
  "points": 195,
  "driver_name_1": "Max Verstappen",
  "driver_name_2": "Sergio Perez",
  "driver_name_3": null
}


Update a Constructor Standing
PUT /constructor-standings/:id

Updates an existing constructor standing.

Parameters:
- id (path parameter): The ID of the constructor standing to update

Request Body:
Same as for creating a new constructor standing.

Response Example:
{
  "id": 1,
  "constructor_name": "Red Bull Racing",
  "points": 205,
  "driver_name_1": "Max Verstappen",
  "driver_name_2": "Sergio Perez",
  "driver_name_3": null
}


Delete a Constructor Standing
DELETE /constructor-standings/:id

Deletes a constructor standing.

Parameters:
- id (path parameter): The ID of the constructor standing to delete

Response Example:
{
  "message": "Constructor standing deleted successfully"
}


LIVE RACE
---------

Get All Live Race Data
GET /live-race

Returns all current live race entries, ordered by position.

Response Example:
[
  {
    "id": 1,
    "driver_name": "Max Verstappen",
    "team_name": "Red Bull Racing",
    "car_number": 1,
    "position": 1,
    "time_behind": "LEADER",
    "current_lap": 45,
    "is_dnf": 0
  },
  // More live race entries...
]


Get Live Race Entry by ID
GET /live-race/:id

Returns a specific live race entry by its ID.

Parameters:
- id (path parameter): The ID of the live race entry to retrieve

Response Example:
{
  "id": 1,
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "car_number": 1,
  "position": 1,
  "time_behind": "LEADER",
  "current_lap": 45,
  "is_dnf": 0
}


Add a New Live Race Entry
POST /live-race

Creates a new live race entry.

Request Body:
{
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "car_number": 1,
  "position": 1,
  "time_behind": "LEADER",
  "current_lap": 45,
  "is_dnf": 0
}

Required Fields:
- driver_name: Name of the driver
- team_name: Name of the team
- car_number: Driver's car number
- position: Current position

Optional Fields:
- time_behind: Time behind the leader
- current_lap: Current lap
- is_dnf: Whether the driver has retired (0 for no, 1 for yes)

Response Example:
{
  "id": 1,
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "car_number": 1,
  "position": 1,
  "time_behind": "LEADER",
  "current_lap": 45,
  "is_dnf": 0
}


Update a Live Race Entry
PUT /live-race/:id

Updates an existing live race entry.

Parameters:
- id (path parameter): The ID of the live race entry to update

Request Body:
Same as for creating a new live race entry.

Response Example:
{
  "id": 1,
  "driver_name": "Max Verstappen",
  "team_name": "Red Bull Racing",
  "car_number": 1,
  "position": 1,
  "time_behind": "LEADER",
  "current_lap": 46,
  "is_dnf": 0
}


Delete a Live Race Entry
DELETE /live-race/:id

Deletes a live race entry.

Parameters:
- id (path parameter): The ID of the live race entry to delete

Response Example:
{
  "message": "Live race entry deleted successfully"
}


Clear All Live Race Data
DELETE /live-race

Deletes all live race entries.

Response Example:
{
  "message": "All live race data cleared successfully"
}


Error Responses
--------------
When an error occurs, the API will return an appropriate HTTP status code and a JSON object with an error message.

Example Error Response:
{
  "error": "Race not found"
}

Common error status codes:
- 400 Bad Request: Missing or invalid parameters
- 404 Not Found: Requested resource not found
- 500 Internal Server Error: Server-side error

Date Format
-----------
All date/time fields are stored and returned as Unix timestamps (seconds since January 1, 1970, 00:00:00 UTC).

Points System
------------
The API does not automatically calculate points. When adding race results, you should provide the appropriate points according to the current F1 points system:

- 1st place: 25 points
- 2nd place: 18 points
- 3rd place: 15 points
- 4th place: 12 points
- 5th place: 10 points
- 6th place: 8 points
- 7th place: 6 points
- 8th place: 4 points
- 9th place: 2 points
- 10th place: 1 point
- Fastest lap (if in top 10): 1 additional point

Sprint race points:
- 1st place: 8 points
- 2nd place: 7 points
- 3rd place: 6 points
- 4th place: 5 points
- 5th place: 4 points
- 6th place: 3 points
- 7th place: 2 points
- 8th place: 1 point 